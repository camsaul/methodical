{:paths
 ["src" "resources"]

 :deps
 {mvxcvi/puget      {:mvn/version "1.3.2"}
  pretty/pretty     {:mvn/version "1.0.5"}
  potemkin/potemkin {:mvn/version "0.4.5"}}

 :aliases
 {:dev
  {:extra-paths ["dev" "test"]

   :extra-deps
   {clj-kondo/clj-kondo            {:mvn/version "2025.01.16"}
    eftest/eftest                  {:mvn/version "0.5.9"}
    environ/environ                {:mvn/version "1.2.0"}
    io.github.camsaul/humane-are   {:mvn/version "1.0.2"}
    org.clojure/java.classpath     {:mvn/version "1.0.0"}
    org.clojure/math.combinatorics {:mvn/version "0.1.6"}
    org.clojure/tools.namespace    {:mvn/version "1.3.0"}
    pjstadig/humane-test-output    {:mvn/version "0.11.0"}}

   :jvm-opts
   [ ;; if compilation on launch fails or whatever print to console instead of a temp file.
    "-Dclojure.main.report=stderr"
    ;; [LEVEL logger-name] message stacktrace
    "-Djava.util.logging.SimpleFormatter.format=%n[%4$s %3$s] %5$s%n%6$s%n"
    ;; Exceptions that get thrown repeatedly are created without stacktraces as a performance optimization in newer Java
    ;; versions. This makes debugging pretty hard when working on stuff locally -- prefer debuggability over performance
    ;; for local dev work.
    "-XX:-OmitStackTraceInFastThrow"]}

  ;; clojure -M:check
  :check
  {:extra-deps {athos/clj-check {:git/url "https://github.com/athos/clj-check.git"
                                 :sha     "518d5a1cbfcd7c952f548e6dbfcb9a4a5faf9062"}}
   :main-opts  ["-m" "clj-check.check"]}

  ;; clj -T:whitespace-linter
  :whitespace-linter
  {:deps       {com.github.camsaul/whitespace-linter {:sha "e35bc252ccf5cc74f7d543ef95ad8a3e5131f25b"}}
   :ns-default whitespace-linter
   :exec-fn    whitespace-linter/lint
   :exec-args  {:paths            ["deps.edn" "src" "test" ".github" #_"doc"]
                :include-patterns ["\\.clj[cs]?$" "\\.edn$" "\\.yaml$" "\\.md$"]}}

  ;; clojure -X:dev:test
  :test
  {:exec-fn   methodical.test-runner/run-tests
   :exec-args {:only ["test"]}
   :jvm-opts  ["-Dinhumane.test.output=true"]}

  ;; Run Kondo
  ;;
  ;;    clojure -M:kondo --lint ...
  ;;
  ;; Copy configs
  ;;
  ;;    clojure -M:kondo --copy-configs --dependencies --lint "$(clojure -A:dev -Spath)" --skip-lint --parallel
  :kondo
  {:replace-deps {clj-kondo/clj-kondo {:mvn/version "2025.01.16"}}
   :main-opts    ["-m" "clj-kondo.main"]}

  ;; lint everything with Kondo
  ;;
  ;; clojure -M:kondo:kondo/all
  :kondo/all
  {:main-opts ["-m" "clj-kondo.main"
               "--lint"
               "src"
               "test"]}

  ;; clj -X:dev:cloverage
  :cloverage
  {:extra-deps {cloverage/cloverage {:mvn/version "1.2.4"}}
   :exec-fn    methodical.cloverage-runner/run-project
   :exec-args  {:codecov?     true
                :src-ns-path  ["src"]
                :test-ns-path ["test"]
                :exclude-call []
                :ns-regex     ["^methodical\\..*"]}}

  ;; clojure -T:build
  :build
  {:deps       {io.github.clojure/tools.build {:git/tag "v0.9.6" :git/sha "8e78bcc"}
                slipset/deps-deploy           {:mvn/version "0.2.2"}}
   :ns-default build}}}
